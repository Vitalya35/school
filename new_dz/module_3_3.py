# 1.Функция с параметрами по умолчанию:
# Создайте функцию print_params(a = 1, b = 'строка', c = True),
# которая принимает три параметра со значениями по умолчанию (например сейчас это: 1, 'строка', True).
# Функция должна выводить эти параметры.
# Вызовите функцию print_params с разным количеством аргументов, включая вызов без аргументов.
# Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])
# 2.Распаковка параметров:
# Создайте список values_list с тремя элементами разных типов.
# Создайте словарь values_dict с тремя ключами, соответствующими параметрам функции print_params,
# и значениями разных типов.
# Передайте values_list и values_dict в функцию print_params,
# используя распаковку параметров (* для списка и ** для словаря).
# 3.Распаковка + отдельные параметры:
# Создайте список values_list_2 с двумя элементами разных типов
# Проверьте, работает ли print_params(*values_list_2, 42)
        # Пример результата выполнения программы:     # Исходный код:  # values_list_2 = [54.32, 'Строка' ]
# Вывод на консоль:    # 54.32 'Строка' 42                             # print_params(*values_list_2, 42)
# Примечания:
# Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.
# Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию, что упрощает работу с данными.

def print_params(a=1, b=str, c=True):
    print(a, b, c)

print_params(b=25)
print_params(c=[1, 2, 3])
print_params()
print_params(a=False, b=[123], c={'a': 1, 'b': 2})
print_params(b=(1, 2, 1), c='chlen')
print_params(a=(), c=[])

values_list = [True, (1, 2, 3), 'chlen']
values_dict = {'a': ['n', 'e', 'l'], 'b': 15, 'c': {'d': False}}
print_params(*values_list)
print_params(**values_dict)

values_list_2 = [(1, 2, 3), True]
print_params(*values_list_2, 42)